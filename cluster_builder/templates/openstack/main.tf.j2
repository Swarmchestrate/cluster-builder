provider "openstack" {
  auth_url                     = "{{ auth_url }}"
  application_credential_id     = "{{ application_credential_id }}"
  application_credential_secret = "{{ application_credential_secret }}"
  region                       = "{{ region }}"
}

# Define cluster name from Python
locals {
  cluster_name = "{{ cluster_name }}"
}

# Auto-select network based on cluster name
resource "openstack_networking_network_v2" "cluster_network" {
  name = "network-${local.cluster_name}"  # Ensure your network follows this naming convention
}

{% if k3s_role == "master" %}
# Master node
resource "openstack_blockstorage_volume_v3" "root_volume" {
  name        = "K3s-Master-Node-volume-${local.cluster_name}"
  size        = "{{ size }}"
  volume_type = "{{ volume_type }}" 
  image_id    = "{{ image_id }}"
}

resource "openstack_compute_instance_v2" "k3s_master" {
  name            = "K3s-Master-Node-${local.cluster_name}"
  flavor_id       = "{{ flavor_id }}"
  key_pair        = "{{ ssh_key_name }}"
  security_groups = [openstack_networking_secgroup_v2.k3s_security_group.name]  # Use security group from the network_security_group.tf

  block_device {
    uuid                  = openstack_blockstorage_volume_v3.root_volume.id
    source_type           = "volume"
    destination_type      = "volume"
    boot_index            = 0
    delete_on_termination = true
  }

  network {
    uuid = openstack_networking_network_v2.cluster_network.id
  }

  user_data = templatefile("master_user_data.sh.tpl", {
    k3s_token = "{{ k3s_token }}"
  })
}

output "cluster_name" {
  description = "The unique cluster name"
  value       = local.cluster_name
}

output "master_ip" {
  description = "The floating IP of the master node"
  value       = openstack_compute_instance_v2.k3s_master.access_ip_v4
}

output "security_group_name" {
  description = "The security group name"
  value       = openstack_networking_secgroup_v2.k3s_security_group.name
}
{% endif %}

{% if k3s_role == "ha" %}
variable "master_ip" {
  description = "Master node IP"
  type        = string
}

variable "cluster_name" {
  description = "Cluster name"
  type        = string
}

variable "security_group_name" {
  description = "Security group name"
  type        = string
}

# HA nodes
resource "openstack_blockstorage_volume_v3" "root_volume" {
  count       = {{ openstack_ha_server_count | default(1) }}
  name        = "K3s-HA-Node-volume-${local.cluster_name}-${count.index + 1}"
  size        = "{{ size }}"
  volume_type = "{{ volume_type }}"
  image_id    = "{{ image_id }}"
}

resource "openstack_compute_instance_v2" "k3s_ha" {
  count           = {{ openstack_ha_server_count | default(1) }}
  name            = "K3s-HA-Server-${local.cluster_name}-${count.index + 1}"
  flavor_id       = "{{ flavor_id }}"
  key_pair        = "{{ ssh_key_name }}"
  security_groups = [var.security_group_name]  # Use the passed security group name

  block_device {
    uuid                  = openstack_blockstorage_volume_v3.root_volume[count.index].id
    source_type           = "volume"
    destination_type      = "volume"
    boot_index            = 0
    delete_on_termination = true
  }

  network {
    uuid = openstack_networking_network_v2.cluster_network.id
  }

  user_data = templatefile("ha_user_data.sh.tpl", {
    k3s_token = "{{ k3s_token }}",
    master_ip = var.master_ip
  })
}
{% endif %}

{% if k3s_role == "worker" %}
variable "master_ip" {
  description = "Master node IP"
  type        = string
}

variable "cluster_name" {
  description = "Cluster name"
  type        = string
}

variable "security_group_name" {
  description = "Security group name"
  type        = string
}

# Worker nodes
resource "openstack_blockstorage_volume_v3" "root_volume" {
  count       = {{ openstack_worker_count | default(1) }}
  name        = "K3s-Worker-Node-volume-${local.cluster_name}-${count.index + 1}"
  size        = "{{ size }}"
  volume_type = "{{ volume_type }}"
  image_id    = "{{ image_id }}"
}

resource "openstack_compute_instance_v2" "k3s_worker" {
  count           = {{ openstack_worker_count | default(1) }}
  name            = "K3s-Worker-Node-${local.cluster_name}-${count.index + 1}"
  image_id        = "{{ image_id }}"
  flavor_id       = "{{ flavor_id }}"
  key_pair        = "{{ ssh_key_name }}"
  security_groups = [var.security_group_name]  # Use the passed security group name

  block_device {
    uuid                  = openstack_blockstorage_volume_v3.root_volume[count.index].id
    source_type           = "volume"
    destination_type      = "volume"
    boot_index            = 0
    delete_on_termination = true
  }

  network {
    uuid = openstack_networking_network_v2.cluster_network.id
  }

  user_data = templatefile("worker_user_data.sh.tpl", {
    k3s_token = "{{ k3s_token }}",
    master_ip = var.master_ip
  })
}
{% endif %}
